{"version":3,"sources":["index.js"],"names":["Square","props","className","square","active","onClick","value","Board","i","key","this","squares","columns","Array","fill","map","c","index","renderSquare","r","renderRow","React","Component","Game","state","history","stepNumber","xIsNext","isOrderDesc","slice","length","s","calculateWinner","setState","concat","clickedSquare","step","move","current","winner","reverse","status","moves","desc","undefined","calculateMove","parseInt","jumpTo","winnerPlayer","forEach","winnerSquares","indexOf","find","handleClick","orderMoves","lines","a","b","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18a7d5c5.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button className={`square ${props.square.active ? \"winner\" : \"\"}`} onClick={props.onClick}>\n      {props.square.value}\n    </button>\n  )\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square key={i}\n              square={this.props.squares[i]}\n              onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  renderRow(i, columns) {\n    return (\n      <div className=\"board-row\" key={i}>\n        {Array(columns).fill(0).map((c, index) => this.renderSquare(i + index))}\n      </div>\n    )\n  }\n\n  render() {\n    const columns = 3\n    const rows = 3;\n    return (\n      <div>\n        {Array(rows).fill(0).map((r, i) => this.renderRow(i * columns, columns))}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(0).map(() => ({value: null, active: false})),\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      isOrderDesc: false,\n    }\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.map(s => ({...s}));\n    if (calculateWinner(squares) || squares[i].value) {\n      return;\n    }\n    squares[i].value = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares,\n        clickedSquare: i,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    })\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  orderMoves() {\n    this.setState({\n      isOrderDesc: !this.state.isOrderDesc,\n    })\n  }\n\n  calculateMove(move) {\n    return this.state.isOrderDesc ? this.state.history.length - 1 - move : move;\n  }\n\n  render() {\n    let history = this.state.history.slice();\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    if (this.state.isOrderDesc) {\n      history = history.reverse();\n    }\n    const moves = history.map((step, move) => {\n      const desc = step.clickedSquare !== undefined ?\n        `Go to move #${this.calculateMove(move)}: (${parseInt(step.clickedSquare / 3)}, ${step.clickedSquare % 3})` :\n        'Go to game start'\n      return (\n        <li key={move}>\n          <button\n            className={`${this.calculateMove(move) === this.state.stepNumber ? \"active\" : \"\"}`}\n            onClick={() => this.jumpTo(this.calculateMove(move))}\n          >{desc}</button>\n        </li>\n      )\n    })\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner.winnerPlayer;\n      current.squares.forEach((s, i) => {\n        s.active = winner.winnerSquares.indexOf(i) > -1;\n      })\n    } else if (!current.squares.find(s => !s.value)) {\n      status = 'Result is a draw'\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <div className=\"next-player\">{status}</div>\n          <Board\n            squares={current.squares}\n            onClick={i => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <button onClick={() => this.orderMoves()}>Order Moves</button>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game/>,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a].value && squares[a].value === squares[b].value && squares[a].value === squares[c].value) {\n      return {winnerPlayer: squares[a].value, winnerSquares: lines[i]};\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}