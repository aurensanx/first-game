{"version":3,"sources":["index.js"],"names":["Square","props","className","square","active","onClick","value","Board","i","key","this","squares","Array","fill","map","r","renderSquare","React","Component","Game","state","history","stepNumber","xIsNext","isOrderDesc","slice","length","s","calculateWinner","nextValue","completed","filter","areMovesCompleted","setState","concat","clickedSquare","step","move","status","current","winner","winnerPlayer","forEach","winnerSquares","indexOf","find","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb64a409.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n\nfunction Square(props) {\n  return (\n    <button className={`square${props.square.active ? \" winner\" : \"\"}`} onClick={props.onClick}>\n      {props.square.value}\n    </button>\n  )\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square key={i}\n              square={this.props.squares[i]}\n              onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    const cells = 9;\n    return (\n      Array(cells).fill(0).map((r, i) => this.renderSquare(i))\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(0).map(() => ({value: null, active: false})),\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      isOrderDesc: false,\n    }\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.map(s => ({...s}));\n    if (calculateWinner(squares)) {\n      return;\n    }\n    const nextValue = this.state.xIsNext ? 'X' : 'O';\n    const completed = areMovesCompleted(squares, nextValue);\n    if (completed && (!squares[i].value || squares[i].value !== nextValue)) {\n      return;\n    }\n    if (!completed && squares[i].value) {\n      return;\n    }\n\n    squares[i].value = completed ? '' : this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares,\n        clickedSquare: i,\n      }]),\n      stepNumber: history.length,\n      xIsNext: completed ? this.state.xIsNext : !this.state.xIsNext,\n    })\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  calculateMove(move) {\n    return this.state.isOrderDesc ? this.state.history.length - 1 - move : move;\n  }\n\n  render() {\n    let history = this.state.history.slice();\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner.winnerPlayer;\n      current.squares.forEach((s, i) => {\n        s.active = winner.winnerSquares.indexOf(i) > -1;\n      })\n    } else if (!current.squares.find(s => !s.value)) {\n      status = 'Result is a draw'\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"next-player\">{status}</div>\n        <div className=\"board-container\">\n          <div className=\"board\">\n            <div className=\"board-content\">\n              <Board\n                squares={current.squares}\n                onClick={i => this.handleClick(i)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game/>,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a].value && squares[a].value === squares[b].value && squares[a].value === squares[c].value) {\n      return {winnerPlayer: squares[a].value, winnerSquares: lines[i]};\n    }\n  }\n  return null;\n}\n\nfunction areMovesCompleted(squares, nextValue) {\n  return squares.filter(s => s.value === nextValue).length === 3;\n}\n"],"sourceRoot":""}